// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: quotes.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const addProductToQuote = `-- name: AddProductToQuote :exec
INSERT INTO core.quote_products (quote_id, product_id, quantity, price_per_unit, tax_rate, total_price)
VALUES ($1, $2, $3, $4, $5, $6)
`

type AddProductToQuoteParams struct {
	QuoteID      int32
	ProductID    int32
	Quantity     int32
	PricePerUnit float64
	TaxRate      float64
	TotalPrice   float64
}

func (q *Queries) AddProductToQuote(ctx context.Context, arg AddProductToQuoteParams) error {
	_, err := q.db.Exec(ctx, addProductToQuote,
		arg.QuoteID,
		arg.ProductID,
		arg.Quantity,
		arg.PricePerUnit,
		arg.TaxRate,
		arg.TotalPrice,
	)
	return err
}

const createQuote = `-- name: CreateQuote :one
INSERT INTO core.quotes (quote_code, customer_id, status, total_amount, currency)
VALUES ($1, $2, $3, $4, $5)
    RETURNING id, quote_code, customer_id, status, total_amount, currency, created_at, updated_at
`

type CreateQuoteParams struct {
	QuoteCode   sql.NullString
	CustomerID  int32
	Status      string
	TotalAmount float64
	Currency    string
}

func (q *Queries) CreateQuote(ctx context.Context, arg CreateQuoteParams) (CoreQuote, error) {
	row := q.db.QueryRow(ctx, createQuote,
		arg.QuoteCode,
		arg.CustomerID,
		arg.Status,
		arg.TotalAmount,
		arg.Currency,
	)
	var i CoreQuote
	err := row.Scan(
		&i.ID,
		&i.QuoteCode,
		&i.CustomerID,
		&i.Status,
		&i.TotalAmount,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductsByQuoteID = `-- name: GetProductsByQuoteID :many
SELECT
    qp.product_id,
    p.name AS product_name,
    qp.quantity,
    qp.price_per_unit,
    qp.tax_rate,
    qp.total_price
FROM core.quote_products qp
         JOIN core.products p ON p.id = qp.product_id
WHERE qp.quote_id = $1
`

type GetProductsByQuoteIDRow struct {
	ProductID    int32
	ProductName  string
	Quantity     int32
	PricePerUnit float64
	TaxRate      float64
	TotalPrice   float64
}

func (q *Queries) GetProductsByQuoteID(ctx context.Context, quoteID int32) ([]GetProductsByQuoteIDRow, error) {
	rows, err := q.db.Query(ctx, getProductsByQuoteID, quoteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsByQuoteIDRow
	for rows.Next() {
		var i GetProductsByQuoteIDRow
		if err := rows.Scan(
			&i.ProductID,
			&i.ProductName,
			&i.Quantity,
			&i.PricePerUnit,
			&i.TaxRate,
			&i.TotalPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuoteByID = `-- name: GetQuoteByID :one
SELECT
    id AS quote_id,
    quote_code,
    customer_id,
    status,
    total_amount,
    currency,
    created_at,
    updated_at
FROM core.quotes
WHERE id = $1
`

type GetQuoteByIDRow struct {
	QuoteID     int32
	QuoteCode   sql.NullString
	CustomerID  int32
	Status      string
	TotalAmount float64
	Currency    string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) GetQuoteByID(ctx context.Context, id int32) (GetQuoteByIDRow, error) {
	row := q.db.QueryRow(ctx, getQuoteByID, id)
	var i GetQuoteByIDRow
	err := row.Scan(
		&i.QuoteID,
		&i.QuoteCode,
		&i.CustomerID,
		&i.Status,
		&i.TotalAmount,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
